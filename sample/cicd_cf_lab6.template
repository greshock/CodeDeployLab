{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "CodeStar Bootcamp",
    "Parameters": {
        "KeyPair": {"Type": "AWS::EC2::KeyPair::KeyName"},
        "ImageId": {"Type": "String", "Default": "ami-1ecae776"},
        "MySQLUsername": {"Type": "String", "Default": "mysql"},
        "MySQLPassword": {"Type": "String", "Default": "Bootcamp372948", "NoEcho": true}
    },
    "Resources": {
        "Bucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {}
        },
        "AppRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Principal": {
                            "Service": ["ec2.amazonaws.com"]
                        },
                        "Action": ["sts:AssumeRole"]
                    }]
                },
                "Path": "/",
                "Policies": [{
                    "PolicyName": "codestar-bootcamp-AppPolicy",
                    "PolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [{
                            "Effect": "Allow",
                            "Action": [
                                "s3:Get*",
                                "s3:List*"
                            ],
                            "Resource": [
                                {"Fn::Join": ["", ["arn:aws:s3:::", {"Ref":"Bucket"}, "/*"]]},
                                "arn:aws:s3:::aws-codedeploy-us-east-1/*"
                            ]
                        },{
                            "Effect": "Allow",
                            "Action": [                                "autoscaling:UpdateAutoScalingGroup"
                            ],
                            "Resource": "*"
                        }]
                    }
                }]
            }
        },
        "AppIstPfl": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [{"Ref":"AppRole"}]
            }
        },
        "JenkinsRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Principal": {
                            "Service": ["ec2.amazonaws.com"]
                        },
                        "Action": ["sts:AssumeRole"]
                    }]
                },
                "Path": "/",
                "Policies": [{
                    "PolicyName": "codestar-bootcamp-RWPolicy",
                    "PolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [{
                            "Effect": "Allow",
                            "Action": [
                                "s3:ListBucket",
                                "s3:GetBucketLocation"
                            ],
                            "Resource": {"Fn::Join": ["", ["arn:aws:s3:::", {"Ref":"Bucket"}]]}
                        },{
                            "Effect": "Allow",
                            "Action": [
                                "s3:GetObject",
                                "s3:PutObject",
                                "s3:DeleteObject"
                            ],
                            "Resource": {"Fn::Join": ["", ["arn:aws:s3:::", {"Ref":"Bucket"}, "/*"]]}
                        },{
                            "Effect": "Allow",
                            "Action": "codedeploy:*",
                            "Resource": "*"
                        }]
                    }
                }]
            }
        },
        "JenkinsIstPfl": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [{"Ref":"JenkinsRole"}]
            }
        },
        "CodeDeployRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Principal": {
                            "Service": ["codedeploy.amazonaws.com"]
                        },
                        "Action": ["sts:AssumeRole"]
                    }]
                },
                "Path": "/",
                "Policies": [{
                    "PolicyName": "codestar-bootcamp-CodeDeployPolicy",
                    "PolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [ {
                            "Action": [
                                "autoscaling:PutLifecycleHook",
                                "autoscaling:DeleteLifecycleHook",
                                "autoscaling:RecordLifecycleActionHeartbeat",
                                "autoscaling:CompleteLifecycleAction",
                                "autoscaling:DescribeAutoscalingGroups",
                                "autoscaling:PutInstanceInStandby",
                                "autoscaling:PutInstanceInService",
                                "ec2:Describe*",
                                "Tag:get*"
                            ],
                            "Effect": "Allow",
                            "Resource": "*"
                        } ]
                    }
                }]
            }
        },
        "Vpc": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": "10.0.0.0/16",
                "EnableDnsHostnames": true,
                "EnableDnsSupport": true,
                "Tags": [{
                    "Key": "Name",
                    "Value": "codestar-bootcamp-VPC"
                }]
            }
        },
        "DhcpOpts": {
            "Type": "AWS::EC2::DHCPOptions",
            "Properties": {
                "DomainNameServers": ["AmazonProvidedDNS"]
            }
        },
        "VpcDhcpOptsAsc": {
            "Type": "AWS::EC2::VPCDHCPOptionsAssociation",
            "Properties": {
                "DhcpOptionsId": {"Ref":"DhcpOpts"},
                "VpcId": {"Ref":"Vpc"}
            }
        },
        "Gateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {}
        },
        "GatewayAttachment": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "DependsOn": "Vpc",
            "Properties": {
                "VpcId": {"Ref":"Vpc"},
                "InternetGatewayId": {"Ref":"Gateway"}
            }
        },
        "DmzRtTbl": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {"Ref":"Vpc"}
            }
        },
        "WanRt": {
            "Type": "AWS::EC2::Route",
            "DependsOn": "GatewayAttachment",
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "RouteTableId": {"Ref":"DmzRtTbl"},
                "GatewayId": {"Ref":"Gateway"}
            }
        },
        "DmzNacl": {
            "Type": "AWS::EC2::NetworkAcl",
            "Properties": {
                "VpcId": {"Ref":"Vpc"},
                "Tags": [{"Key":"Name","Value":"codestar-bootcamp-NACL"}]
            }
        },
        "DmzNaclIn": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Egress": false,
                "NetworkAclId": {"Ref":"DmzNacl"},
                "PortRange": {"From":0,"To":65535},
                "Protocol": -1,
                "RuleAction": "allow",
                "RuleNumber": 10
            }
        },
        "DmzNaclOut": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Egress": true,
                "NetworkAclId": {"Ref":"DmzNacl"},
                "PortRange": {"From":0,"To":65535},
                "Protocol": -1,
                "RuleAction": "allow",
                "RuleNumber": 10
            }
        },
        "DmzSbntA": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {"Fn::Select":[0,{"Fn::GetAZs":""}]},
                "CidrBlock": "10.0.0.0/24",
                "VpcId": {"Ref":"Vpc"},
                "Tags": [{
                    "Key": "Name",
                    "Value": "codestar-bootcamp-A"
                }]
            }
        },
        "DmzSbntANaclAsc": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "NetworkAclId": {"Ref":"DmzNacl"},
                "SubnetId": {"Ref":"DmzSbntA"}
            }
        },
        "DmzSbntARtTblAsc": {
            "Type":"AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {"Ref":"DmzRtTbl"},
                "SubnetId": {"Ref":"DmzSbntA"}
            }
        },

        "DmzSbntB": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {"Fn::Select":[1,{"Fn::GetAZs":""}]},
                "CidrBlock": "10.0.1.0/24",
                "VpcId": {"Ref":"Vpc"},
                "Tags": [{
                    "Key": "Name",
                    "Value": "codestar-bootcamp-B"
                }]
            }
        },
        "DmzSbntBNaclAsc": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "NetworkAclId": {"Ref":"DmzNacl"},
                "SubnetId": {"Ref":"DmzSbntB"}
            }
        },
        "DmzSbntBRtTblAsc": {
            "Type":"AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {"Ref":"DmzRtTbl"},
                "SubnetId": {"Ref":"DmzSbntB"}
            }
        },
        "AppSg": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "CodeStar Bootcamp",
                "VpcId": {"Ref":"Vpc"},
                "SecurityGroupIngress": [
                    {"IpProtocol": "6", "FromPort": 80,  "ToPort": 80,  "CidrIp": "0.0.0.0/0"},
                    {"IpProtocol": "6", "FromPort": 443, "ToPort": 443,  "CidrIp": "0.0.0.0/0"},
                    {"IpProtocol": "6", "FromPort": 80,  "ToPort": 80,  "CidrIp": "0.0.0.0/0"},
                    {"IpProtocol": "6", "FromPort": 22,  "ToPort": 22,  "CidrIp": "0.0.0.0/0"}
                ],
                "SecurityGroupEgress": [
                    {"IpProtocol": "6", "FromPort": 80,  "ToPort": 80,  "CidrIp": "0.0.0.0/0"},
                    {"IpProtocol": "6", "FromPort": 443, "ToPort": 443, "CidrIp": "0.0.0.0/0"}
                ],
                "Tags": [{"Key":"Name","Value":"codestar-bootcamp-php"}]
            }
        },
        "MySQLSg": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "CodeStar Bootcamp MySQL",
                "VpcId": {"Ref":"Vpc"},
                "SecurityGroupIngress": [
                    {"IpProtocol": "6", "FromPort": "3306", "ToPort": "3306", "SourceSecurityGroupId": {"Ref":"AppSg"}}
                ],
                "Tags": [{"Key":"Name","Value":"codestar-bootcamp-MySQL"}]
            }
        },
        "AppSgMySqlEgress": {
            "Type": "AWS::EC2::SecurityGroupEgress",
            "Properties": {
                "GroupId": {"Ref":"AppSg"},
                "IpProtocol": "6",
                "FromPort": "3306",
                "ToPort": "3306",
                "DestinationSecurityGroupId": {"Ref":"MySQLSg"}
            }
        },
        "JenkinsSg": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "CodeStar Bootcamp Jenkins",
                "VpcId": {"Ref":"Vpc"},
                "SecurityGroupIngress": [
                    {"IpProtocol": "6", "FromPort": 80, "ToPort": 80, "CidrIp": "0.0.0.0/0"},
                    {"IpProtocol": "6", "FromPort": 22, "ToPort": 22, "CidrIp": "0.0.0.0/0"}
                ],
                "SecurityGroupEgress": [
                    {"IpProtocol": "6", "FromPort": 80,  "ToPort": 80,  "CidrIp": "0.0.0.0/0"},
                    {"IpProtocol": "6", "FromPort": 443, "ToPort": 443, "CidrIp": "0.0.0.0/0"},
                    {"IpProtocol": "6", "FromPort": 22,  "ToPort": 22,  "CidrIp": "0.0.0.0/0"}
                ],
                "Tags": [{"Key":"Name","Value":"codestar-bootcamp-Jenkins"}]
            }
        },

        "Jenkins": {
            "Type": "AWS::EC2::Instance",
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT5M"
                }
            },
            "Properties": {
                "IamInstanceProfile": {"Ref":"JenkinsIstPfl"},
                "ImageId": {"Ref": "ImageId"},
                "InstanceType": "m3.medium",
                "KeyName": {"Ref": "KeyPair"},
                "Monitoring": true,
                "NetworkInterfaces": [{
                    "AssociatePublicIpAddress": true,
                    "DeviceIndex": "0",
                    "GroupSet": [{"Ref":"JenkinsSg"}],
                    "SubnetId": {"Ref": "DmzSbntA"}
                }],
                "Tags": [{
                    "Key": "Name",
                    "Value": "devops-bootcamp-Jenkins"
                }],
                "UserData": {"Fn::Base64":{"Fn::Join": ["",[
                    "#!/bin/bash -xe\n\n",
                    "yum -y update\n",
                    "yum -y install tomcat8 nginx git  aws-cli \n",
                    "chkconfig tomcat8 on\n",
                    "cd /usr/share/tomcat8/webapps/\n",
                    "wget -O ROOT.war http://mirrors.jenkins-ci.org/war/latest/jenkins.war\n",
                    "/etc/init.d/tomcat8 start\n",
                    "cat >/etc/nginx/conf.d/jenkins.conf <<EOF\n",
                    "server {\n",
                    "    listen 80;\n",
                    "        location / {\n",
                    "        proxy_pass http://localhost:8080;\n",
                    "    }\n",
                    "}\n",
                    "EOF\n\n",
                    "service nginx start\n",
                    "chkconfig nginx on\n",
                    "/opt/aws/bin/cfn-signal -e $? ",
                    "         --stack ", {"Ref": "AWS::StackName"},
                    "         --resource Jenkins ",
                    "         --region ", {"Ref": "AWS::Region"}, "\n"
                ]]}}
            }
        },
        "LAMP": {
            "Type": "AWS::EC2::Instance",
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT10M"
                }
            },
            "Properties": {
                "IamInstanceProfile": {"Ref":"AppIstPfl"},
                "ImageId": {"Ref": "ImageId"},
                "InstanceType": "m3.medium",
                "KeyName": {"Ref": "KeyPair"},
                "Monitoring": true,
                "NetworkInterfaces": [{
                    "AssociatePublicIpAddress": true,
                    "DeviceIndex": "0",
                    "GroupSet": [{"Ref":"AppSg"}],
                    "SubnetId": {"Ref": "DmzSbntA"}
                }],
                "Tags": [{
                    "Key": "Name",
                    "Value": "codestar-bootcamp-LAMP"
                }],
                "UserData": {"Fn::Base64":{"Fn::Join": ["",[
                    "#!/bin/bash -xe\n\n",
                    "yum -y update\n",
                    "yum -y install aws-cli httpd php mysql-server php-mysqlnd \n",
                    "chkconfig httpd on\n",
                    "service httpd start\n",
                    "chkconfig mysqld on\n",
                    "service mysqld start on\n",
                    "cd /home/ec2-user\n",
                    "aws s3 cp s3://aws-codedeploy-us-east-1/latest/install . --region us-east-1\n",
                    "chmod +x ./install\n",
                    "./install auto\n",
                    "/opt/aws/bin/cfn-signal -e $? ",
                    "         --stack ", {"Ref": "AWS::StackName"},
                    "         --resource LAMP ",
                    "         --region ", {"Ref": "AWS::Region"}, "\n"
                ]]}}
            }
        },
        "TARGET": {
            "Type": "AWS::EC2::Instance",
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT15M"
                }
            },
            "Properties": {
                "IamInstanceProfile": {"Ref":"AppIstPfl"},
                "ImageId": {"Ref": "ImageId"},
                "InstanceType": "m3.medium",
                "KeyName": {"Ref": "KeyPair"},
                "Monitoring": true,
                "NetworkInterfaces": [{
                    "AssociatePublicIpAddress": true,
                    "DeviceIndex": "0",
                    "GroupSet": [{"Ref":"AppSg"}],
                    "SubnetId": {"Ref": "DmzSbntA"}
                }],
                "Tags": [{
                    "Key": "Name",
                    "Value": "codestar-bootcamp-TARGET"
                }],
                "UserData": {"Fn::Base64":{"Fn::Join": ["",[
                    "#!/bin/bash -xe\n\n",
                    "yum -y update\n",
                    "yum -y install aws-cli httpd php mysql-server php-mysqlnd \n",
                    "chkconfig httpd on\n",
                    "service httpd start\n",
                    "chkconfig mysqld on\n",
                    "service mysqld start on\n",
                    "cd /home/ec2-user\n",
                    "aws s3 cp s3://aws-codedeploy-us-east-1/latest/install . --region us-east-1\n",
                    "chmod +x ./install\n",
                    "./install auto\n",
                    "/opt/aws/bin/cfn-signal -e $? ",
                    "         --stack ", {"Ref": "AWS::StackName"},
                    "         --resource TARGET ",
                    "         --region ", {"Ref": "AWS::Region"}, "\n"
                ]]}}
            }
        }
      },
    "Outputs": {
        "Bucket": {
            "Description": "Name of your environment's S3 bucket",
            "Value": {"Ref":"Bucket"}
        },
        "JenkinsURL": {
            "Description": "URL for your environment's Jenkins server",
            "Value": {"Fn::Join":["",["http://",{"Fn::GetAtt":["Jenkins","PublicDnsName"]}]]}
        },
        "LAMP": {
            "Description": "Hostname for your environment's LAMP instance",
            "Value": {"Fn::GetAtt":["LAMP","PublicDnsName"]}
        },
        "TARGET": {
            "Description": "Hostname for your environment's TARGET instance",
            "Value": {"Fn::GetAtt":["TARGET","PublicDnsName"]}
        }
    }
  }